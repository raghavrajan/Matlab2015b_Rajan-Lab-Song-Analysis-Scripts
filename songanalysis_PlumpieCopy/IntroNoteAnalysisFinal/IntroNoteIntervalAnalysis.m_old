function [INIAnalysisResults] = IntroNoteIntervalAnalysis(IntroNoteResults, PlotFeatCols)

% Using a system for AllINFeatLabels that keeps track of whether the intro
% note was the first, last or a middle intro note. The way I do this is by
% having 3 boolean flags for first, middle and last intro note. For
% instance if there was only one intro note, it would have the flags 1 0 1
% to indicate that is the first, it is also the last.

MinNumber = 2;

AllINFeats = [];
AllINFeatRatios = [];
AllINFeatLabels = [];
AllINFeatNoofINs = [];
AllMotifInts = [];
AllMotifIntNoofINs = [];
for i = 1:length(IntroNoteResults.NoofINs),
    TempMotifFeats = IntroNoteResults.BoutDetails(i).onsets(IntroNoteResults.INs{i}(end)+1) - IntroNoteResults.BoutDetails(i).offsets(IntroNoteResults.INs{i}(end)); 
    AllMotifInts = [AllMotifInts; TempMotifFeats];
    AllMotifIntNoofINs = [AllMotifIntNoofINs; IntroNoteResults.NoofINs(i)];
    if (IntroNoteResults.NoofINs(i) > 1)
        TempFeats = IntroNoteResults.BoutDetails(i).onsets(IntroNoteResults.INs{i}(2:end)) - IntroNoteResults.BoutDetails(i).offsets(IntroNoteResults.INs{i}(1:end-1)); 
        AllFeats = [TempFeats; TempMotifFeats];
        for j = 1:(IntroNoteResults.NoofINs(i) - 1),
            AllINFeatRatios = [AllINFeatRatios; AllFeats(j+1)/AllFeats(j)];
        end
        AllINFeats = [AllINFeats; TempFeats];
        AllINFeatNoofINs = [AllINFeatNoofINs; ones(size(TempFeats,1),1)*(size(TempFeats,1)+1)];
        if (~isempty(TempFeats))
            if (size(TempFeats,1) == 1)
                AllINFeatLabels = [AllINFeatLabels; [1 0 1]]; 
            else
                if (size(TempFeats,1) == 2)
                    AllINFeatLabels = [AllINFeatLabels; [1 0 0; 0 0 1]];
                else
                    AllINFeatLabels = [AllINFeatLabels; [1 0 0; repmat([0 1 0], (size(TempFeats,1)-2), 1); [0 0 1]]];
                end
            end
        end
    end
end

BoutIndices = find(IntroNoteResults.WithinBoutNoofINs(:,1) > 0);
for i = 1:length(BoutIndices),
    TempMotifFeats = IntroNoteResults.BoutDetails(IntroNoteResults.WithinBoutINBoutIndices(BoutIndices(i))).onsets(IntroNoteResults.WithinBoutINs{BoutIndices(i)}(end)+1) - IntroNoteResults.BoutDetails(IntroNoteResults.WithinBoutINBoutIndices(BoutIndices(i))).offsets(IntroNoteResults.WithinBoutINs{BoutIndices(i)}(end));
    AllMotifInts = [AllMotifInts; TempMotifFeats];
    AllMotifIntNoofINs = [AllMotifIntNoofINs; IntroNoteResults.WithinBoutNoofINs(BoutIndices(i),1)];
    if (IntroNoteResults.WithinBoutNoofINs(BoutIndices(i),1) > 1)
        TempFeats = IntroNoteResults.BoutDetails(IntroNoteResults.WithinBoutINBoutIndices(BoutIndices(i))).onsets(IntroNoteResults.WithinBoutINs{BoutIndices(i)}(2:end)) - IntroNoteResults.BoutDetails(IntroNoteResults.WithinBoutINBoutIndices(BoutIndices(i))).offsets(IntroNoteResults.WithinBoutINs{BoutIndices(i)}(1:end-1));
        AllFeats = [TempFeats; TempMotifFeats];
        for j = 1:(IntroNoteResults.WithinBoutNoofINs(BoutIndices(i),1) - 1),
            AllINFeatRatios = [AllINFeatRatios; AllFeats(j+1)/AllFeats(j)];
        end
        AllINFeats = [AllINFeats; TempFeats];
        AllINFeatNoofINs = [AllINFeatNoofINs; ones(size(TempFeats,1),1)*(size(TempFeats,1)+1)];
        if (~isempty(TempFeats))
            if (size(TempFeats,1) == 1)
                AllINFeatLabels = [AllINFeatLabels; [1 0 1]]; 
            else
                if (size(TempFeats,1) == 2)
                    AllINFeatLabels = [AllINFeatLabels; [1 0 0; 0 0 1]];
                else
                    AllINFeatLabels = [AllINFeatLabels; [1 0 0; repmat([0 1 0], (size(TempFeats,1)-2), 1); [0 0 1]]];
                end
            end
        end
    end
end

MeanAllINFeats = mean(AllINFeats);
MADAllINFeats = mad(AllINFeats);

NormAllINFeats = (AllINFeats - repmat(MeanAllINFeats, size(AllINFeats, 1), 1))./repmat(MADAllINFeats, size(AllINFeats, 1), 1);

MaxINs = max([max(IntroNoteResults.NoofINs) max(IntroNoteResults.WithinBoutNoofINs(:,1))]);

for i = 1:MaxINs,
    INInts{i} = [];
    for j = 1:length(IntroNoteResults.NoofINs),
        if (IntroNoteResults.NoofINs(j) == i)
            INInts{i} = [INInts{i}; [(IntroNoteResults.BoutDetails(j).onsets([IntroNoteResults.INs{j}+1]) - IntroNoteResults.BoutDetails(j).offsets([IntroNoteResults.INs{j}]))]'];
        end
    end
end

BoutIndices = find(IntroNoteResults.WithinBoutNoofINs(:,1) > 0);
for i = 1:MaxINs,
    if (i > length(INInts))
        INInts{i} = [];
    end
    for j = 1:length(BoutIndices),
        if (IntroNoteResults.WithinBoutNoofINs(BoutIndices(j),1) == i)
            INInts{i} = [INInts{i}; [(IntroNoteResults.BoutDetails(IntroNoteResults.WithinBoutINBoutIndices(BoutIndices(j))).onsets(IntroNoteResults.WithinBoutINs{BoutIndices(j)}+1) - IntroNoteResults.BoutDetails(IntroNoteResults.WithinBoutINBoutIndices(BoutIndices(j))).offsets(IntroNoteResults.WithinBoutINs{BoutIndices(j)}))]'];
        end
    end
end

figure;
hold on;
Colours = ['cbrgk'];
Symbols = ['sdvp'];
for i = 1:length(INInts),
    if (~isempty(INInts{i}))
        if (size(INInts{i},1) < MinNumber)
            continue;
        end
        errorbar([-(i-1):1:0]+(rand*1/3 - 1/6), mean(INInts{i}), std(INInts{i}), [Colours(mod(i,length(Colours))+1), Symbols(mod(floor(i/length(Colours)), length(Symbols)) + 1), '-'], 'MarkerSize', 5, 'MarkerFaceColor', Colours(mod(i,length(Colours)) + 1));
    end
end
axis tight;
set(gca, 'FontSize', 10, 'FontName', 'Arial');
ylabel('Interval between INs (sec)', 'FontSize', 12, 'FontName', 'Arial');
set(gca, 'Box', 'off');
set(gcf, 'Color', 'w');

INIAnalysisResults.AllINFeats = AllINFeats;
INIAnalysisResults.AllINFeatLabels = AllINFeatLabels;
INIAnalysisResults.AllINFeatNoofINs = AllINFeatNoofINs;
INIAnalysisResults.AllMotifInts = AllMotifInts;
INIAnalysisResults.AllMotifIntNoofINs = AllMotifIntNoofINs;
INIAnalysisResults.INInts = INInts;

disp('Finished feature analysis');
